{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/api/analyse": {
      "post": {
        "summary": "Post Analyse",
        "operationId": "post_analyse_api_analyse_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/verify_api_key": {
      "post": {
        "summary": "Verify Api Key",
        "description": "Endpoint to verify the provided Gemini API key.",
        "operationId": "verify_api_key_api_verify_api_key_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKey"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/avatar/generate": {
      "post": {
        "summary": "Generate Avatar",
        "operationId": "generate_avatar_api_avatar_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvatarRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/{app_id}/settings": {
      "get": {
        "summary": "Get App Settings",
        "description": "Retrieves the settings for a specific app.",
        "operationId": "get_app_settings_api_apps__app_id__settings_get",
        "parameters": [
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "App Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps": {
      "get": {
        "summary": "Get Apps",
        "description": "Reads all app example JSON files, extracts key information,\nand returns a list of app configurations.",
        "operationId": "get_apps_api_apps_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response Get Apps Api Apps Get"
                }
              }
            }
          }
        }
      }
    },
    "/{full_path}": {
      "get": {
        "summary": "Catch All",
        "description": "Catch-all route to serve the index.html file for any non-API routes.",
        "operationId": "catch_all__full_path__get",
        "parameters": [
          {
            "name": "full_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Full Path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ws/{user_id}": {
      "post": {
        "summary": "WebSocket connection",
        "description": "Establishes a WebSocket connection for real-time communication with an agent.The `is_audio` query parameter should be set to `true` for audio-based interactions.\n\n**Protocol:**\n1. Client connects to the WebSocket endpoint.\n2. Client sends a `SettingsMessage` to configure the agent.\n3. Client and agent exchange messages (`TextMessage`, `AudioMessage` from client; `AgentTextMessage`, `AgentAudioMessage`, etc. from agent).",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the user establishing the connection."
          },
          {
            "name": "is_audio",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "description": "Specifies if the session will handle audio."
          }
        ],
        "requestBody": {
          "description": "Initial settings message to configure the agent.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "settings"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/AppSettings"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "101": {
            "description": "Switching Protocols. The connection is upgraded to a WebSocket."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnalyseRequest": {
        "properties": {
          "notes": {
            "type": "string",
            "title": "Notes"
          },
          "settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AppSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "notes"
        ],
        "title": "AnalyseRequest"
      },
      "ApiKey": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          }
        },
        "type": "object",
        "required": [
          "key"
        ],
        "title": "ApiKey"
      },
      "AppSettings": {
        "properties": {
          "app_name": {
            "type": "string",
            "title": "App Name"
          },
          "agent_description": {
            "type": "string",
            "title": "Agent Description"
          },
          "context_dict": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "Context Dict"
          },
          "goal_description": {
            "type": "string",
            "title": "Goal Description"
          },
          "analyse_instruction": {
            "type": "string",
            "title": "Analyse Instruction"
          },
          "voice_name": {
            "type": "string",
            "title": "Voice Name"
          },
          "language_code": {
            "type": "string",
            "title": "Language Code"
          },
          "gemini_api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gemini Api Key"
          },
          "search_tool": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Search Tool",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "app_name",
          "agent_description",
          "context_dict",
          "goal_description",
          "analyse_instruction",
          "voice_name",
          "language_code"
        ],
        "title": "AppSettings"
      },
      "AvatarRequest": {
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/AppSettings"
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key"
          }
        },
        "type": "object",
        "required": [
          "settings"
        ],
        "title": "AvatarRequest"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}